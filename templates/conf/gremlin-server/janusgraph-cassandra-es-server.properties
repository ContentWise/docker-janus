gremlin.graph={{ default .Env.GREMLIN_GRAPH "org.janusgraph.core.JanusGraphFactory" }}

schema.default={{ default .Env.SCHEMA_DEFAULT "tp3" }}

# JanusGraph configuration sample: Cassandra & Elasticsearch over sockets
#
# This file connects to Cassandra and Elasticsearch services running
# on localhost over the Thrift API and the Elasticsearch native
# "Transport" API on their respective default ports.  The Cassandra
# and Elasticsearch services must already be running before starting
# JanusGraph with this file.

# The primary persistence provider used by JanusGraph.  This is required.  It
# should be set one of JanusGraph's built-in shorthand names for its standard
# storage backends (shorthands: berkeleyje, cassandrathrift, cassandra,
# astyanax, embeddedcassandra, hbase, inmemory) or to the full package and
# classname of a custom/third-party StoreManager implementation.
#
# Default:    (no default value)
# Data Type:  String
# Mutability: LOCAL
storage.backend={{ default .Env.STORAGE_BACKEND "cassandra" }}

# The hostname or comma-separated list of hostnames of storage backend
# servers.  This is only applicable to some storage backends, such as
# cassandra and hbase.
#
# Default:    127.0.0.1
# Data Type:  class java.lang.String[]
# Mutability: LOCAL
storage.hostname={{ default .Env.STORAGE_HOSTNAME "cassandra" }}
storage.port={{ default .Env.STORAGE_PORT "9160" }}

# True to use Cassandra atomic batch mutation, false to use non-atomic batches
#
# Default:    true
# Data Type:  Boolean
# Mutability: MASKABLE
storage.cassandra.atomic-batch-mutate={{ default .Env.STORAGE_CASSANDRA_ATOMIC_BATCH_MUTATE "true" }}

# The compaction strategy to use for JanusGraph tables
#
# Default:
# Data Type:  String
# Mutability: FIXED
storage.cassandra.compaction-strategy-class={{ default .Env.STORAGE_CASSANDRA_COMPACTION_STRATEGY_CLASS "" }}

# Compaction strategy options. This list is interpreted as a map. It must have
# an even number of elements in [key,val,key,val,…] form.
#
# Default:
# Data Type:  String[]
# Mutability: FIXED
storage.cassandra.compaction-strategy-options={{ default .Env.STORAGE_CASSANDRA_COMPACTION_STRATEGY_OPTIONS "" }}

# Whether the storage backend should use compression when storing the data
#
# Default:    true
# Data Type:  Boolean
# Mutability: FIXED
storage.cassandra.compression={{ default .Env.STORAGE_CASSANDRA_COMPRESSION "true" }}

# The size of the compression blocks in kilobytes
#
# Default:    64
# Data Type:  Integer
# Mutability: FIXED
storage.cassandra.compression-block-size={{ default .Env.STORAGE_CASSANDRA_COMPRESSION_BLOCK_SIZE "64" }}

# The sstable_compression value Titan uses when creating column families.
# This accepts any value allowed by Cassandra’s sstable_compression option.
# Leave this unset to disable sstable_compression on Titan-created CFs.
#
# Default:    LZ4Compressor
# Data Type:  String
# Mutability: MASKABLE
storage.cassandra.compression-type={{ default .Env.STORAGE_CASSANDRA_COMPRESSION_TYPE "LZ4Compressor" }}

# The thrift frame size in megabytes
#
# Default:    15
# Data Type:  Integer
# Mutability: MASKABLE
storage.cassandra.frame-size-mb={{ default .Env.STORAGE_CASSANDRA_FRAME_SIZE_MB "15" }}

# The name of Titan’s keyspace. It will be created if it does not exist.
#
# Default:    janusgraph
# Data Type:  String
# Mutability: Local
storage.cassandra.keyspace={{ default .Env.STORAGE_CASSANDRA_KEYSPACE "janusgraph" }}

# The consistency level of read operations against Cassandra
#
# Default:    QUORUM
# Data Type:  String
# Mutability: MASKABLE
storage.cassandra.read-consistency-level={{ default .Env.STORAGE_CASSANDRA_READ_CONSISTENCY_LEVEL "QUORUM" }}

# The number of data replicas (including the original copy) that should
# be kept. This is only meaningful for storage backends that natively
# support data replication.
#
# Default:    1
# Data Type:  Integer
# Mutability: GLOBAL_OFFLINE
storage.cassandra.replication-factor={{ default .Env.STORAGE_CASSANDRA_REPLICATION_FACTOR "1" }}

# The replication strategy to use for Titan keyspace
#
# Default:    org.apache.cassandra.locator.SimpleStrategy
# Data Type:  String
# Mutability: FIXED
storage.cassandra.replication-strategy-class={{ default .Env.STORAGE_CASSANDRA_REPLICATION_STRATEGY_CLASS "org.apache.cassandra.locator.SimpleStrategy" }}

# Replication strategy options, e.g. factor or replicas per datacenter.
# This list is interpreted as a map. It must have an even number of
# elements in [key,val,key,val,…] form. A replication_factor set here
# takes precedence over one set with storage.cassandra.replication-factor
#
# Default:
# Data Type:  String[]
# Mutability: FIXED
storage.cassandra.replication-strategy-options={{ default .Env.STORAGE_CASSANDRA_REPLICATION_STRATEGY_OPTIONS "" }}

# The consistency level of write operations against Cassandra
#
# Default:    QUORUM
# Data Type:  String
# Mutability: MASKABLE
storage.cassandra.write-consistency-level={{ default .Env.STORAGE_CASSANDRA_WRITE_CONSISTENCY_LEVEL "QUORUM" }}

# Whether to enable JanusGraph's database-level cache, which is shared across
# all transactions. Enabling this option speeds up traversals by holding
# hot graph elements in memory, but also increases the likelihood of
# reading stale data.  Disabling it forces each transaction to
# independently fetch graph elements from storage before reading/writing
# them.
#
# Default:    false
# Data Type:  Boolean
# Mutability: MASKABLE
cache.db-cache={{ default .Env.CACHE_DB_CACHE "false" }}

# How long, in milliseconds, database-level cache will keep entries after
# flushing them.  This option is only useful on distributed storage
# backends that are capable of acknowledging writes without necessarily
# making them immediately visible.
#
# Default:    50
# Data Type:  Integer
# Mutability: GLOBAL_OFFLINE
#
# Settings with mutability GLOBAL_OFFLINE are centrally managed in JanusGraph's
# storage backend.  After starting the database for the first time, this
# file's copy of this setting is ignored.  Use JanusGraph's Management System
# to read or modify this value after bootstrapping.
cache.db-cache-clean-wait={{ default .Env.CACHE_DB_CACHE_CLEAN_WAIT "50" }}

# Default expiration time, in milliseconds, for entries in the
# database-level cache. Entries are evicted when they reach this age even
# if the cache has room to spare. Set to 0 to disable expiration (cache
# entries live forever or until memory pressure triggers eviction when set
# to 0).
#
# Default:    10000
# Data Type:  Long
# Mutability: GLOBAL_OFFLINE
#
# Settings with mutability GLOBAL_OFFLINE are centrally managed in JanusGraph's
# storage backend.  After starting the database for the first time, this
# file's copy of this setting is ignored.  Use JanusGraph's Management System
# to read or modify this value after bootstrapping.
cache.db-cache-time={{ default .Env.CACHE_DB_CACHE_TIME "10000" }}

# Size of JanusGraph's database level cache.  Values between 0 and 1 are
# interpreted as a percentage of VM heap, while larger values are
# interpreted as an absolute size in bytes.
#
# Default:    0.3
# Data Type:  Double
# Mutability: MASKABLE
cache.db-cache-size={{ default .Env.CACHE_DB_CACHE_SIZE "0.3" }}

# Connect to an already-running ES instance on localhost

# The indexing backend used to extend and optimize JanusGraph's query
# functionality. This setting is optional.  JanusGraph can use multiple
# heterogeneous index backends.  Hence, this option can appear more than
# once, so long as the user-defined name between "index" and "backend" is
# unique among appearances.Similar to the storage backend, this should be
# set to one of JanusGraph's built-in shorthand names for its standard index
# backends (shorthands: lucene, elasticsearch, es, solr) or to the full
# package and classname of a custom/third-party IndexProvider
# implementation.
#
# Default:    elasticsearch
# Data Type:  String
# Mutability: GLOBAL_OFFLINE
#
# Settings with mutability GLOBAL_OFFLINE are centrally managed in JanusGraph's
# storage backend.  After starting the database for the first time, this
# file's copy of this setting is ignored.  Use JanusGraph's Management System
# to read or modify this value after bootstrapping.
index.search.backend={{ default .Env.INDEX_SEARCH_BACKEND "elasticsearch" }}

# The hostname or comma-separated list of hostnames of index backend
# servers.  This is only applicable to some index backends, such as
# elasticsearch and solr.
#
# Default:    127.0.0.1
# Data Type:  class java.lang.String[]
# Mutability: MASKABLE
index.search.hostname={{ default .Env.INDEX_SEARCH_HOSTNAME "127.0.0.1" }}

# The Elasticsearch node.client option is set to this boolean value, and
# the Elasticsearch node.data option is set to the negation of this value.
# True creates a thin client which holds no data.  False creates a regular
# Elasticsearch cluster node that may store data.
#
# Default:    true
# Data Type:  Boolean
# Mutability: GLOBAL_OFFLINE
#
# Settings with mutability GLOBAL_OFFLINE are centrally managed in JanusGraph's
# storage backend.  After starting the database for the first time, this
# file's copy of this setting is ignored.  Use JanusGraph's Management System
# to read or modify this value after bootstrapping.
index.search.elasticsearch.client-only={{ default .Env.INDEX_SEARCH_ELASTICSEARCH_CLIENT_ONLY "true" }}

# Or start ES inside the JanusGraph JVM
#index.search.backend=elasticsearch
index.search.directory={{ default .Env.INDEX_SEARCH_DIRECTORY "db/es" }}
#index.search.elasticsearch.client-only=false
#index.search.elasticsearch.local-mode=true

metrics.enabled={{ default .Env.METRICS_ENABLED "false" }}

# Custom serializers
attributes.custom.attribute10.attribute-class=java.util.ArrayList
attributes.custom.attribute10.serializer-class=com.contentwise.janus.serializer.ArrayListSerializer
attributes.custom.attribute12.attribute-class=java.util.LinkedHashMap
attributes.custom.attribute12.serializer-class=com.contentwise.janus.serializer.LinkedHashMapSerializer