gremlin.graph={{ default .Env.GREMLIN_GRAPH "org.janusgraph.core.JanusGraphFactory" }}

schema.default={{ default .Env.SCHEMA_DEFAULT "tp3" }}

gremlin.graph=org.janusgraph.core.JanusGraphFactory
#metrics.enabled=true
#metrics.prefix=j
#metrics.csv.interval=1000
#metrics.csv.directory=metrics

# Turn off JanusGraph retries as we batch and have our own exponential backoff strategy.
storage.write-time=1 ms
storage.read-time=1 ms

#Set the storage as read-only
storage.read-only={{ default .Env.STORAGE_READ_ONLY "false" }}

storage.backend=com.amazon.janusgraph.diskstorage.dynamodb.DynamoDBStoreManager
storage.dynamodb.prefix={{ default .Env.JANUS_DYNAMODB_PREFIX "jg" }}

storage.dynamodb.client.credentials.class-name={{ default .Env.STORAGE_DYNAMODB_CLIENT_CREDENTIALS_CLASS_NAME "com.amazonaws.auth.DefaultAWSCredentialsProviderChain" }}
storage.dynamodb.client.credentials.constructor-args={{ default .Env.STORAGE_DYNAMODB_CLIENT_CREDENTIALS_CONSTRUCTOR_ARGS "" }}
storage.dynamodb.client.signing-region={{ default .Env.STORAGE_DYNAMODB_CLIENT_SIGNING_REGION "us-west-2" }}

{{- if .Env.STORAGE_DYNAMODB_CLIENT_ENDPOINT }}
storage.dynamodb.client.endpoint={{ .Env.STORAGE_DYNAMODB_CLIENT_ENDPOINT }}
{{ end }}

storage.dynamodb.stores.edgestore.initial-capacity-read=12
storage.dynamodb.stores.edgestore.initial-capacity-write=12
storage.dynamodb.stores.edgestore.read-rate={{ default .Env.STORAGE_DYNAMODB_STORES_EDGESTORE_READ_RATE "12" }}
storage.dynamodb.stores.edgestore.write-rate={{ default .Env.STORAGE_DYNAMODB_STORES_EDGESTORE_WRITE_RATE "12" }}

storage.dynamodb.stores.graphindex.initial-capacity-read=9
storage.dynamodb.stores.graphindex.initial-capacity-write=9
storage.dynamodb.stores.graphindex.read-rate={{ default .Env.STORAGE_DYNAMODB_STORES_GRAPHINDEX_READ_RATE "9" }}
storage.dynamodb.stores.graphindex.write-rate={{ default .Env.STORAGE_DYNAMODB_STORES_GRAPHINDEX_WRITE_RATE "9" }}

storage.dynamodb.stores.systemlog.initial-capacity-read=1
storage.dynamodb.stores.systemlog.initial-capacity-write=1
storage.dynamodb.stores.systemlog.read-rate=1
storage.dynamodb.stores.systemlog.write-rate=1

storage.dynamodb.stores.janusgraph_ids.initial-capacity-read=1
storage.dynamodb.stores.janusgraph_ids.initial-capacity-write=1
storage.dynamodb.stores.janusgraph_ids.read-rate=1
storage.dynamodb.stores.janusgraph_ids.write-rate=1

storage.dynamodb.stores.system_properties.initial-capacity-read=1
storage.dynamodb.stores.system_properties.initial-capacity-write=1
storage.dynamodb.stores.system_properties.read-rate=1
storage.dynamodb.stores.system_properties.write-rate=1

storage.dynamodb.stores.txlog.initial-capacity-read=1
storage.dynamodb.stores.txlog.initial-capacity-write=1
storage.dynamodb.stores.txlog.read-rate=1
storage.dynamodb.stores.txlog.write-rate=1

# Whether to enable JanusGraph's database-level cache, which is shared across
# all transactions. Enabling this option speeds up traversals by holding
# hot graph elements in memory, but also increases the likelihood of
# reading stale data.  Disabling it forces each transaction to
# independently fetch graph elements from storage before reading/writing
# them.
#
# Default:    false
# Data Type:  Boolean
# Mutability: MASKABLE
cache.db-cache={{ default .Env.CACHE_DB_CACHE "false" }}

# How long, in milliseconds, database-level cache will keep entries after
# flushing them.  This option is only useful on distributed storage
# backends that are capable of acknowledging writes without necessarily
# making them immediately visible.
#
# Default:    50
# Data Type:  Integer
# Mutability: GLOBAL_OFFLINE
#
# Settings with mutability GLOBAL_OFFLINE are centrally managed in JanusGraph's
# storage backend.  After starting the database for the first time, this
# file's copy of this setting is ignored.  Use JanusGraph's Management System
# to read or modify this value after bootstrapping.
cache.db-cache-clean-wait={{ default .Env.CACHE_DB_CACHE_CLEAN_WAIT "50" }}

# Default expiration time, in milliseconds, for entries in the
# database-level cache. Entries are evicted when they reach this age even
# if the cache has room to spare. Set to 0 to disable expiration (cache
# entries live forever or until memory pressure triggers eviction when set
# to 0).
#
# Default:    10000
# Data Type:  Long
# Mutability: GLOBAL_OFFLINE
#
# Settings with mutability GLOBAL_OFFLINE are centrally managed in JanusGraph's
# storage backend.  After starting the database for the first time, this
# file's copy of this setting is ignored.  Use JanusGraph's Management System
# to read or modify this value after bootstrapping.
cache.db-cache-time={{ default .Env.CACHE_DB_CACHE_TIME "10000" }}

# Size of JanusGraph's database level cache.  Values between 0 and 1 are
# interpreted as a percentage of VM heap, while larger values are
# interpreted as an absolute size in bytes.
#
# Default:    0.3
# Data Type:  Double
# Mutability: MASKABLE
cache.db-cache-size={{ default .Env.CACHE_DB_CACHE_SIZE "0.3" }}

# Connect to an already-running ES instance on localhost

# The indexing backend used to extend and optimize JanusGraph's query
# functionality. This setting is optional.  JanusGraph can use multiple
# heterogeneous index backends.  Hence, this option can appear more than
# once, so long as the user-defined name between "index" and "backend" is
# unique among appearances.Similar to the storage backend, this should be
# set to one of JanusGraph's built-in shorthand names for its standard index
# backends (shorthands: lucene, elasticsearch, es, solr) or to the full
# package and classname of a custom/third-party IndexProvider
# implementation.
#
# Default:    elasticsearch
# Data Type:  String
# Mutability: GLOBAL_OFFLINE
#
# Settings with mutability GLOBAL_OFFLINE are centrally managed in JanusGraph's
# storage backend.  After starting the database for the first time, this
# file's copy of this setting is ignored.  Use JanusGraph's Management System
# to read or modify this value after bootstrapping.
index.search.backend={{ default .Env.INDEX_SEARCH_BACKEND "elasticsearch" }}

# The hostname or comma-separated list of hostnames of index backend
# servers.  This is only applicable to some index backends, such as
# elasticsearch and solr.
#
# Default:    127.0.0.1
# Data Type:  class java.lang.String[]
# Mutability: MASKABLE
index.search.hostname={{ default .Env.INDEX_SEARCH_HOSTNAME "127.0.0.1" }}

# The Elasticsearch node.client option is set to this boolean value, and
# the Elasticsearch node.data option is set to the negation of this value.
# True creates a thin client which holds no data.  False creates a regular
# Elasticsearch cluster node that may store data.
#
# Default:    true
# Data Type:  Boolean
# Mutability: GLOBAL_OFFLINE
#
# Settings with mutability GLOBAL_OFFLINE are centrally managed in JanusGraph's
# storage backend.  After starting the database for the first time, this
# file's copy of this setting is ignored.  Use JanusGraph's Management System
# to read or modify this value after bootstrapping.
index.search.elasticsearch.client-only={{ default .Env.INDEX_SEARCH_ELASTICSEARCH_CLIENT_ONLY "true" }}

# Or start ES inside the JanusGraph JVM
#index.search.backend=elasticsearch
index.search.directory={{ default .Env.INDEX_SEARCH_DIRECTORY "db/es" }}
#index.search.elasticsearch.client-only=false
#index.search.elasticsearch.local-mode=true

metrics.enabled={{ default .Env.METRICS_ENABLED "false" }}

# Custom serializers
attributes.custom.attribute10.attribute-class=java.util.ArrayList
attributes.custom.attribute10.serializer-class=com.contentwise.janus.serializer.ArrayListSerializer
attributes.custom.attribute12.attribute-class=java.util.LinkedHashMap
attributes.custom.attribute12.serializer-class=com.contentwise.janus.serializer.LinkedHashMapSerializer